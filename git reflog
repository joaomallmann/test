git reflog
This is a HUGE life saver as you can reset back to a more stable state if you get lost in all of your rebase/conflict management.

The easiest way would be to find the head commit of the branch as it was immediately before the rebase started in the reflog...

git reflog
and to reset the current branch to it (with the usual caveats about being absolutely sure before reseting with the --hard option).

Suppose the old commit was HEAD@{5} in the ref log:

git reset --hard HEAD@{5}
In Windows, you may need to quote the reference:

git reset --hard "HEAD@{5}"
You can check the history of the candidate old head by just doing a git log HEAD@{5} (Windows: git log "HEAD@{5}").

If you've not disabled per branch reflogs you should be able to simply do git reflog branchname@{1} as a rebase detaches the branch head before reattaching to the final head. I would double check this, though as I haven't verified this recently.

Per default, all reflogs are activated for non-bare repositories:

git log -g
-----------------


Actually, rebase saves your starting point to ORIG_HEAD so this is usually as simple as:

git reset --hard ORIG_HEAD
However, the reset, rebase and merge all save your original HEAD pointer into ORIG_HEAD so, if you've done any of those commands since the rebase you're trying to undo then you'll have to use the reflog

----------------



git checkout feature
git branch old-feature
git rebase master
git merge -s ours old-feature
git push origin feature